// Realtime Database
private DatabaseReference mDatabase;

// Initialize the Database reference
mDatabase = FirebaseDatabase.getInstance().getReference();

DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss", Locale.getDefault());
Date date = new Date();
mDatabase.child("UsersUpdates").child(GlobalClass.UserUID).child("UpdateOrder").setValue(dateFormat.format(date));

// Check for updates in the order node
mDatabase.child("UsersUpdates").child("UpdateOrder").addValueEventListener(new ValueEventListener() {
    @Override
    public void onDataChange(DataSnapshot dataSnapshot) {
        // Handle update if necessary
    }

    @Override
    public void onCancelled(DatabaseError error) {
        Log.w("DatabaseError", "Failed to read value.", error.toException());
    }
});

// Remote Config
// Ensure your XML file is corrected as below:
<?xml version="1.0" encoding="utf-8"?>
<defaultsMap>
    <entry>
        <key>price</key>
        <value>50 dolor</value>
    </entry>
</defaultsMap>

// Code to run Remote Config
final FirebaseRemoteConfig mFirebaseRemoteConfig = FirebaseRemoteConfig.getInstance();
mFirebaseRemoteConfig.setDefaultsAsync(R.xml.price_tool); // Use setDefaultsAsync for latest versions
long exp = 0;

mFirebaseRemoteConfig.fetch(exp).addOnCompleteListener(new OnCompleteListener<Void>() {
    @Override
    public void onComplete(@NonNull Task<Void> task) {
        if (task.isSuccessful()) {
            mFirebaseRemoteConfig.activate(); // activateFetched is deprecated
            String price = mFirebaseRemoteConfig.getString("price");
            Toast.makeText(getApplicationContext(), price, Toast.LENGTH_LONG).show();
        }
    }
});

// Crash Reporting
try {
    int x = 10 / 0;
} catch (Exception ex) {
    FirebaseCrashlytics.getInstance().log("Division by zero");
    FirebaseCrashlytics.getInstance().recordException(ex);
}

// Storage - Upload Images
ImageView imageView = findViewById(R.id.imageView);

FirebaseStorage storage = FirebaseStorage.getInstance();
StorageReference storageRef = storage.getReferenceFromUrl("gs://firbasedemo-6228f.appspot.com");
StorageReference mountainsRef = storageRef.child("images/mountains.jpg");

imageView.setDrawingCacheEnabled(true);
imageView.buildDrawingCache();
BitmapDrawable drawable = (BitmapDrawable) imageView.getDrawable();
Bitmap bitmap = drawable.getBitmap();
ByteArrayOutputStream baos = new ByteArrayOutputStream();
bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos);
byte[] data = baos.toByteArray();

UploadTask uploadTask = mountainsRef.putBytes(data);
uploadTask.addOnFailureListener(new OnFailureListener() {
    @Override
    public void onFailure(@NonNull Exception exception) {
        // Handle unsuccessful uploads
    }
}).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
    @Override
    public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
        taskSnapshot.getStorage().getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
            @Override
            public void onSuccess(Uri uri) {
                Uri downloadUrl = uri;
                // Use the download URL
            }
        });
    }
});
